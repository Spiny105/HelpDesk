from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import executor

from app import sql
import config

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())




# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
sql.create_tables()

@dp.message_handler(commands=['start'])
async def send_start(message: types.Message):
    user_id = message.from_user.id
    tg_id = user_id
    data_reg = message.date
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ 
    total_user_tickets = sql.get_total_tickets_by_user_id(tg_id)
    open_ticket = str(total_user_tickets) if total_user_tickets else "0"
    
    total_open_tickets = sql.get_total_tickets_by_status(tg_id, "–í —Ä–∞–±–æ—Ç–µ")
    open_ticket = str(total_open_tickets) if total_open_tickets else "0"
    total_closed_tickets = sql.get_total_tickets_by_status(tg_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")

    close_ticket = str(total_closed_tickets) if total_closed_tickets else "0"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = sql.get_user_by_id(user_id)
    
    profile = sql.read_profile(tg_id)
    organization = profile.get("organization", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_phone = profile.get("organization_phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_info = {
            'tg_id': user_id,
            'pos': 'main_menu',
            'data_reg': data_reg, 
            'profile': {"organization": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "organization_adress": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "organization_inn": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "organization_phone": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "history_ticket": "", "data_ticket": "", "user_name": ""}
        }
        sql.add_user(**user_info)
        text_no_user = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HelpDesk –∫–æ–º–ø–∞–Ω–∏–∏ <b>–≠–Ω–∏–ö–µ–π</b>! –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="üè¢ –ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è", callback_data="my_company"))
        await message.answer(text_no_user, reply_markup=keyboard, parse_mode="HTML")
    else:
        text_user =  (f"<b>üßë‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> \n\n" 
                f"<b>üìã –ö–æ–º–ø–∞–Ω–∏—è: </b> {organization}\n"
                f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {organization_phone}\n\n"
                
                f"<b>üì¨–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:</b> {open_ticket}\n" 
                f"<b>üì≠–ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:</b> {close_ticket}\n" 
                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è"
        )
                    
                    
        sql.update_pos('main_menu', 'tg_id', user_id)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="üè¢ –ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è", callback_data="my_company"),
                    InlineKeyboardButton(text="üì• –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_ticket"))
        keyboard.add(InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="new_ticket"))
        await message.answer(text_user, reply_markup=keyboard, parse_mode="HTML")
    
    
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–º–∏–∫—Ä–∏—è –ø–æ–¥ /start
def main_menu(tg_id):
    total_open_tickets = sql.get_total_tickets_by_status(tg_id, "–í —Ä–∞–±–æ—Ç–µ")
    total_closed_tickets = sql.get_total_tickets_by_status(tg_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")

    open_ticket = str(total_open_tickets) if total_open_tickets else "0"
    close_ticket = str(total_closed_tickets) if total_closed_tickets else "0"
    
    profile = sql.read_profile(tg_id)
    organization = profile.get("organization", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_phone = profile.get("organization_phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    text =  (f"<b>üßë‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> \n\n" 
            f"<b>üìã –ö–æ–º–ø–∞–Ω–∏—è: </b> {organization}\n"
            f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {organization_phone}\n\n"
            
            f"<b>üì¨–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:</b> {open_ticket}\n" 
            f"<b>üì≠–ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:</b> {close_ticket}\n" 
            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è"
    )
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üè¢ –ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è", callback_data="my_company"),
                 InlineKeyboardButton(text="üì• –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_ticket"))
    keyboard.add(InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="new_ticket"))
    return text, keyboard
    
    
def new_ticket(tg_id):
    text = f"<b>üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n" \
           f"–ü—Ä–∏–º–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: \n<i>–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –Ω–∞ 4 –ü–ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</i>" 
           
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return text, keyboard 


def my_ticket(tg_id):

    profile = sql.read_profile(tg_id)
    user_tickets_in_progress = sql.get_tickets_in_progress_by_user_id(tg_id)
    total_user_tickets_in_progress = len(user_tickets_in_progress)
    open_ticket = str(total_user_tickets_in_progress) if total_user_tickets_in_progress else "0"
    
    organization = profile.get("organization")
    organization_address = profile.get("organization_adress")
    
    if user_tickets_in_progress:
        text = (f"<b>–ú–æ–∏ –∑–∞—è–≤–∫–∏ üì•</b>\n\n"
                     f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {organization}\n"
                     f"<b>–ê–¥—Ä–µ—Å –∑–∞—è–≤–∫–∏:</b> {organization_address}\n" 
                     f"<b>–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:</b> {open_ticket}\n\n"
                     )     
        for ticket in user_tickets_in_progress:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∫–æ—Ä—Ç–µ–∂–∞           
            text += (f"<b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> {ticket[0]}\n"
                     f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ticket[4]}\n\n"
                    #  f"<b>–°—Ç–∞—Ç—É—Å:</b> {ticket[6]}\n\n"
                     )
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ."

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return text, keyboard


    
# –†–∞–∑–¥–µ–ª –∫–æ–º–ø–∞–Ω–∏—è
def my_company(tg_id):
    profile = sql.read_profile(tg_id)
    organization = profile.get("organization", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_address = profile.get("organization_adress", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_inn = profile.get("organization_inn", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    organization_phone = profile.get("organization_phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏
    text = (f"<b>–î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n\n" 
           f"<b>üè¢–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> <i>{organization}</i>\n" 
           f"<b>üìç–ê–¥—Ä–µ—Å:</b> <i>{organization_address}</i>\n" 
           f"<b>üìë–ò–ù–ù:</b> <i>{organization_inn}</i>\n" 
           f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <i>{organization_phone}</i>\n\n" 
               
           f"<b>–ó–ê–ü–û–õ–ù–ò–¢–¨ –î–ê–ù–ù–´–ï –û –ö–û–ú–ü–ê–ù–ò–ò ‚¨áÔ∏è </b>" )  

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text=f"{'‚úÖ' if organization != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '‚ùå'} –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="edit_company_name"))
    keyboard.add(InlineKeyboardButton(text=f"{'‚úÖ' if organization_address != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '‚ùå'} –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å", callback_data="edit_company_adress"))
    keyboard.add(InlineKeyboardButton(text=f"{'‚úÖ' if organization_inn != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '‚ùå'} –ò–ù–ù", callback_data="edit_company_inn"))
    keyboard.add(InlineKeyboardButton(text=f"{'‚úÖ' if organization_phone != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '‚ùå'} –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", callback_data="edit_company_phone"))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu"))
    return text, keyboard


def edit_company_name(tg_id):
    text = f"üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ü—Ä–∏–º–µ—Ä: <code> –û–û–û –†–û–ì–ê –ò –ö–û–ü–´–¢–ê </code>"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
    return text, keyboard

def edit_company_adress(tg_id):
    text = f"üìç–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ü—Ä–∏–º–µ—Ä: <code> –≥. –ò–≤–∞–Ω–æ–≤–æ, —É–ª. –í–∞—Ä–µ–Ω—Ü–æ–≤–æ–π, –¥. 33 –æ—Ñ. 1 </code>"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
    return text, keyboard
    
def edit_company_inn(tg_id):
    text = f"üìë –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. \n–ü—Ä–∏–º–µ—Ä: <code> 3700010101 </code>"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
    return text, keyboard

def edit_company_phone(tg_id):
    text = f"‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. \n–ü—Ä–∏–º–µ—Ä: <code> +79109998188 </code>"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_company"))
    return text, keyboard
      
def done_ticket(tg_id):
    last_ticket_number = sql.get_last_ticket_number()   
    text = f"–£—Å–ø–µ—Ö, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! \n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ <code>{last_ticket_number}</code>."
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è  –í –º–µ–Ω—é", parse_mode="HTML", callback_data="main_menu"))
    return text, keyboard



# –ì—Ä—É–ø–ø–∞ –∫–æ–ª–±–µ–∫–æ–≤ –Ω–∞ –±–∞—Ç–æ–Ω—ã
@dp.callback_query_handler()
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    user_id = query.from_user.id
    tg_id = user_id

    if query.data == 'main_menu':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ 'pos' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sql.update_pos('main_menu', 'tg_id', user_id)
        text, keyboard = main_menu(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    if query.data == 'my_company':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ 'pos' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sql.update_pos('my_company', 'tg_id', user_id)
        text, keyboard = my_company(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
       
    if query.data == 'edit_company_name':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ 'pos' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sql.update_pos('edit_company_name', 'tg_id', user_id)
        text, keyboard = edit_company_name(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    if query.data == 'edit_company_adress':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ 'pos' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sql.update_pos('edit_company_adress', 'tg_id', user_id)
        text, keyboard = edit_company_adress(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")     

    if query.data == 'edit_company_inn':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ 'pos' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sql.update_pos('edit_company_inn', 'tg_id', user_id)
        text, keyboard = edit_company_inn(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
 
    if query.data == 'edit_company_phone':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ 'pos' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sql.update_pos('edit_company_phone', 'tg_id', user_id)
        text, keyboard = edit_company_phone(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
             
    if query.data == 'new_ticket':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ 'pos' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sql.update_pos('new_ticket', 'tg_id', user_id)
        text, keyboard = new_ticket(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    if query.data == 'my_ticket':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏ 'pos' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        sql.update_pos('my_ticket', 'tg_id', user_id)
        text, keyboard = my_ticket(tg_id)
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")      



        
# –û–±—Ä–∞—Ç–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_text_input(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    tg_id = user_id
    
    profile = sql.read_profile(tg_id)  
    organization_name = profile.get("organization", "")
    organization_address = profile.get("organization_adress", "") 
    organization_phone = profile.get("organization_phone", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    user_position = sql.read_cell('pos', 'tg_id', user_id)

    if user_position == 'edit_company_name':
        sql.update_profile_data(user_id, 'organization', message.text)
        text, keyboard = my_company(user_id)
        await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

    if user_position == 'edit_company_adress':
        sql.update_profile_data(user_id, 'organization_adress', message.text)
        text, keyboard = my_company(user_id)
        await message.reply(text, reply_markup=keyboard, parse_mode="HTML")

    if user_position == 'edit_company_inn':
        sql.update_profile_data(user_id, 'organization_inn', message.text)
        text, keyboard = my_company(user_id)
        await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
        
    if user_position == 'edit_company_phone':
        sql.update_profile_data(user_id, 'organization_phone', message.text)
        text, keyboard = my_company(user_id)
        await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
        
    if user_position == 'new_ticket':
        user_ticket = user_id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É
        organization = organization_name
        addres_ticket = organization_address
        message_ticket = message.text  # –î–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        time_ticket = message.date  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        state_ticket = "–í —Ä–∞–±–æ—Ç–µ"  # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏       

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        sql.add_ticket(user_ticket, organization, addres_ticket, message_ticket, time_ticket, state_ticket)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        last_ticket_number = sql.get_last_ticket_number()
        print(last_ticket_number)

        if last_ticket_number:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
            sql.update_profile_data(user_id, 'history_ticket', str(last_ticket_number))
            sql.update_profile_data(user_id, 'data_ticket', str(time_ticket))
            sql.update_profile_data(user_id, 'user_name', str(username))
            # –ú–µ–Ω—é –±–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∏
            text, keyboard = done_ticket(user_id)
            await message.reply(text, reply_markup=keyboard, parse_mode="HTML")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_text = (f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –Ω–æ–º–µ—Ä–æ–º <code>{last_ticket_number}</code>."
                          f"\n\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n - {message_ticket}"
                          f"\n\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {organization_phone}\n"
                          f"<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {organization}\n"
                          f"<b>–ê–¥—Ä–µ—Å:</b> {addres_ticket}\n"
            )
            await bot.send_message(config.ADMIN_USER, admin_text, parse_mode="HTML")
        else:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏.")




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
